// Generated by CoffeeScript 1.7.1
(function() {
  var Chests, Drawer, Promise, Url, escapeRegExp, eventSplitter, namedParam, optionalParam, splatParam, _;

  _ = require("underscore");

  Promise = require("es6-promise").Promise;

  Drawer = require("./drawer");

  eventSplitter = /\s+/;

  optionalParam = /\((.*?)\)/g;

  namedParam = /(\(\?)?:\w+/g;

  splatParam = /\*\w+/g;

  escapeRegExp = /[\-{}\[\]+?.,\\\^$|#\s]/g;

  Chests = (function() {
    Chests.prototype.debug = true;

    Chests.prototype.drawer = null;

    Chests.prototype.routes = null;

    Chests.prototype.eventList = ['leave', 'close', 'open', 'enter'];

    Chests.prototype.wait = function(ms) {
      return new Promise(function(res, rej) {
        return setTimeout((function() {
          return res();
        }), ms);
      });
    };

    function Chests() {
      this.routes = [];
      this.drawer = new Drawer;
    }

    Chests.prototype.log = function() {
      if (this.debug) {
        return console.log.apply(console, arguments);
      }
    };

    Chests.prototype.trigger = function(url, event) {
      var results, ret, str;
      this.log("\t" + (event.toUpperCase()) + "\t" + url);
      results = _.map(this.routes, (function(_this) {
        return function(e) {
          var param;
          param = e.re.exec(url);
          if (param && (e.event === event || e.event === "*")) {
            param.unshift(event);
            return e.callback.apply(_this, _.compact(param));
          }
        };
      })(this));
      ret = _.compact(results);
      str = ("\t" + (event.toUpperCase()) + "ED\t").replace("EE", "E");
      if (ret.length > 0) {
        Promise.all(ret).then((function(_this) {
          return function() {
            return _this.log(str, url);
          };
        })(this));
      } else {
        this.log(str, url, "didn't return value or no callbacks");
      }
      return ret;
    };

    Chests.prototype.off = function(pathOrCallback, event) {
      if (event == null) {
        event = null;
      }
      if (_.isFunction(pathOrCallback)) {
        return this.routes = _.filter(this.routes, function(e, i) {
          return e.callback !== pathOrCallback;
        });
      } else if ((pathOrCallback != null) && (event != null)) {
        return this.routes = _.filter(this.routes, (function(_this) {
          return function(e, i) {
            return e.event !== event || e.re.toString() !== _this._routeToRegExp(pathOrCallback).toString();
          };
        })(this));
      } else {
        throw new Error("Invalid arguments.");
      }
    };

    Chests.prototype.on = function(route, listenerOrEvent, cb) {
      var event;
      if (cb == null) {
        cb = null;
      }
      route = this._routeToRegExp(route);
      if (_.isObject(listenerOrEvent)) {
        return _.each(this.eventList, (function(_this) {
          return function(event) {
            var c;
            if (!(c = listenerOrEvent[event])) {
              return;
            }
            return _this.routes.push({
              re: route,
              event: event,
              callback: c
            });
          };
        })(this));
      }
      event = _.isString(listenerOrEvent) ? listenerOrEvent : null;
      return this.routes.push({
        re: route,
        event: event,
        callback: cb
      });
    };

    Chests.prototype._routeToRegExp = function(route) {
      if (_.isRegExp(route)) {
        return route;
      }
      route = route.replace(escapeRegExp, '\\$&').replace(optionalParam, '(?:$1)?').replace(namedParam, (function(match, optional) {
        if (optional) {
          return match;
        } else {
          return '([^/?|:]+)';
        }
      })).replace(splatParam, '([^?]*?)');
      return new RegExp('^' + route + '(?:\\?([\\s\\S]*))?$');
    };

    Chests.prototype._parseUrl = function(url) {
      if (!url) {
        return [];
      }
      return ["/"].concat(_.compact(url.split("/")));
    };

    Chests.prototype._formatUrl = function(url) {
      return url.replace(/\/+/g, "/").replace(/(.+)\/$/, "$1");
    };

    Chests.prototype.resolvePath = function(prefix, paths) {
      paths = _.compact(paths);
      return _.compact(_.map(paths, (function(_this) {
        return function(e, i) {
          return _this._formatUrl(prefix.concat(paths.slice(0, i + 1)).join("/"));
        };
      })(this)));
    };

    Chests.prototype.splitPath = function(current, prev) {
      var common, down, separateFlg, up;
      up = [];
      down = [];
      common = [];
      separateFlg = false;
      _.filter(_.zip(this._parseUrl(current), this._parseUrl(prev)), function(e) {
        if (e[0] === e[1] && !separateFlg) {
          return common.push(e[0]);
        } else {
          separateFlg = true;
          down.push(e[0]);
          return up.push(e[1]);
        }
      });
      return [up, down, common];
    };

    Chests.prototype.findRoute = function(current, prev) {
      var common, down, up, _ref;
      _ref = this.splitPath(current, prev), up = _ref[0], down = _ref[1], common = _ref[2];
      return [this.resolvePath(common, up).reverse(), this.resolvePath(common, down)];
    };

    Chests.prototype.matchRoute = function(current, prev) {
      var down, up, _ref;
      _ref = this.findRoute(current, prev), up = _ref[0], down = _ref[1];
      if (up.length === 0 && down.length === 0) {
        return this.drawer.promise();
      }
      if (up && up.length > 0) {
        this.drawer.add((function(_this) {
          return function() {
            return _this.trigger(up[0], "leave");
          };
        })(this));
        _.each(up, (function(_this) {
          return function(url, i) {
            return _this.drawer.add(function() {
              return _this.trigger(url, "close");
            });
          };
        })(this));
      } else if (prev != null) {
        if (up.length === 0) {
          this.drawer.add((function(_this) {
            return function() {
              return _this.trigger(prev, "leave");
            };
          })(this));
        } else {
          this.drawer.add((function(_this) {
            return function() {
              return _this.trigger('/', "leave");
            };
          })(this));
        }
      }
      if (down && down.length > 0) {
        _.each(down, (function(_this) {
          return function(url, i) {
            return _this.drawer.add(function() {
              return _this.trigger(url, "open");
            });
          };
        })(this));
        return this.drawer.add((function(_this) {
          return function() {
            return _this.trigger(_.last(down), "enter");
          };
        })(this));
      } else if (prev != null) {
        if (down.length === 0) {
          return this.drawer.add((function(_this) {
            return function() {
              return _this.trigger(current, "enter");
            };
          })(this));
        } else {
          return this.drawer.add((function(_this) {
            return function() {
              return _this.trigger('/', "enter");
            };
          })(this));
        }
      }
    };

    Chests.prototype.activate = function(url, interrupt) {
      if (interrupt == null) {
        interrupt = false;
      }
      return this.wait(0).then((function(_this) {
        return function() {
          var _ref, _ref1;
          if (interrupt && _this.drawer.drawers.length > 0) {
            _this.log("\n ---- Interrupted: all promises will be rejected :: " + ((_ref = (_ref1 = _this.url.prev) != null ? _ref1.url : void 0) != null ? _ref : null) + "----\n");
            _this.drawer.clear();
          }
          _this.url = new Url({
            prev: _this.url || null,
            url: url
          });
          return _this.drawer.then(function() {
            var _ref2, _ref3, _ref4, _ref5;
            _this.log("\n「" + ((_ref2 = (_ref3 = _this.url.prev) != null ? _ref3.url : void 0) != null ? _ref2 : null) + "」 ================> 「" + url + "」\n");
            return _this.matchRoute(_this.url.url, (_ref4 = (_ref5 = _this.url.prev) != null ? _ref5.url : void 0) != null ? _ref4 : null).then(function() {
              _this.drawer.clear();
              return _this.log("\n================= ACTIVATED 「" + url + "」\n");
            });
          });
        };
      })(this));
    };

    return Chests;

  })();

  Url = (function() {
    Url.prototype.prev = {};

    Url.prototype.url = "";

    function Url(opt) {
      this.prev = opt.prev, this.url = opt.url;
    }

    return Url;

  })();

  if (typeof module === "object" && typeof module.exports === "object") {
    module.exports = Chests;
  }

  if (typeof define === 'function' && define.amd) {
    define('chests', [], function() {
      return Chests;
    });
  } else if (typeof window !== "undefined") {
    window.Chests = Chests;
  }

}).call(this);
